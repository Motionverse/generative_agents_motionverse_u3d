name: PR test runner

on:
  pull_request:
    types: [ opened, reopened, edited ]

jobs:
  runAllTests:
    name: ${{ matrix.unityVersion }} ${{ matrix.testMode }} tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - playmode
          - editmode
        unityVersion:
          - 2020.3.0f1
    steps:
      - name: Checkout Unity-SDK Repository
        uses: actions/checkout@v3
        with:
          repository: "readyplayerme/Unity-SDK"
          submodules: true
          fetch-depth: 0
          ref: develop
          token: ${{ secrets.DEV_SDK_TOKEN }}
 
      - name: Get PR dependencies
        id: pr-dependencies
        run: |
          PR_DEPENDENCY=$(awk -v start="\`\`\`Package" -v end="\`\`\`" '{
            if ($0 ~ start) {p=1; next}
            if (p && !($0 ~ end)) {print}
            if ($0 ~ end) {p=0}
          }' <<\EOF
          ${{ github.event.pull_request.body }}
          EOF
          )
          echo "dependency=$PR_DEPENDENCY" >> "$GITHUB_OUTPUT"
      - name: Checkout submodule branch
        run: |
          cd Assets/Ready\ Player\ Me/Avatar\ Loader
          git fetch -a
          git checkout ${{ github.event.pull_request.head.ref }}
          git pull origin ${{ github.event.pull_request.head.ref }}
          
          dependency="${{ steps.pr-dependencies.outputs.dependency }}"
          if [ -z "$dependency" ]; then
            echo "No dependency found in PR description"
            exit 0
          fi
          echo "Dependencies found - ${dependency}"
          
          CORE_BRANCH="${dependency#*Core: }"
          CORE_BRANCH=$(echo "$CORE_BRANCH" | tr -d '\r')
          
          cd ../Core
          git fetch -a
          git checkout "$CORE_BRANCH"
          
          if [ $? -ne 0 ]; then
            echo "Core checkout failed, no branch found with name $CORE_BRANCH"
            exit 0
          fi
          
          git pull origin "$CORE_BRANCH"
          
      - name: Cache Project 
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Run Tests
        uses: game-ci/unity-test-runner@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          unityVersion: ${{ matrix.unityVersion }}
          testMode: ${{ matrix.testMode }}
          projectPath: ${{ matrix.projectPath }}
          checkName: ${{ matrix.unityVersion }} ${{ matrix.testMode }} tests result
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          coverageOptions: "generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*"

      - name: Setup python
        if: ${{ matrix.testMode == 'editmode' && always() }}
        uses: actions/setup-python@v4
      - name: Install dependencies
        if: ${{ matrix.testMode == 'editmode' }}
        run: |
          pip install numpy
      - name: Parse performance report
        if: ${{ matrix.testMode == 'editmode' }}
        id: parser
        run: |
          cd Scripts
          python PerformanceDataParser.py

      - name: Post comment with benchmark report
        uses: actions/github-script@v6
        if: ${{ matrix.testMode == 'editmode' }}
        env:
          MULTILINE_OUTPUT: ${{ steps.parser.outputs.report }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: process.env.MULTILINE_OUTPUT
              })

      - name: Push performance benchmark data to git
        if: ${{ matrix.testMode == 'editmode' }}
        run: |
          git config --global user.name "dev-sdk"
          git config --global user.email "dev-sdk@wolf3d.io"
          git fetch --all
          git add PerformanceData.json
          git commit -m 'chore: update performance data'
          git status
          git reset --hard
          git pull origin develop --rebase
          git push origin develop
